import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { AnimatePresence } from "framer-motion";
import {
  MessageCircle,
  X,
  Send,
  Bot,
  User,
  CheckCircle,
  XCircle,
} from "lucide-react";
import { motion } from "framer-motion";
// import { motion } from "motion/react";
// import heroFace from '../../assets/heroFace.png';

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [showEmiCalculator, setShowEmiCalculator] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [showEligibilityQuiz, setShowEligibilityQuiz] = useState(false);
  const [quizStep, setQuizStep] = useState(0);
  const [quizAnswers, setQuizAnswers] = useState({});
  const [emiInputs, setEmiInputs] = useState({
    loanAmount: "",
    interestRate: "",
    tenure: "",
  });
  const [messages, setMessages] = useState([
    {
      type: "bot",
      content:
        getGreeting() + " ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
      options: [
        "‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•à‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?",
        "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?",
        "‡§¶‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∂‡•Å‡§≤‡•ç‡§ï",
        "EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞",
        // '‡§Æ‡•á‡§∞‡•Ä ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç',
        "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¶‡•á‡§ñ‡•á‡§Ç",
      ],
    },
  ]);
  const messagesEndRef = useRef(null);
  const navigate = useNavigate();

  // Place these constants before handleOptionClick
  const minDays = 7;
  const maxDays = 100;
  const fixedInterestRate = 0.2; // per day

  // Function to get personalized greeting based on time of day
  function getGreeting() {
    const hour = new Date().getHours();
    if (hour < 12) return "‡§∏‡•Å‡§™‡•ç‡§∞‡§≠‡§æ‡§§! üëã";
    if (hour < 18) return "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! üëã";
    return "‡§∂‡•Å‡§≠ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ! üëã";
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleOptionClick = (option) => {
    // Add user's message with typing animation
    setMessages((prev) => [...prev, { type: "user", content: option }]);

    // Show typing indicator
    setIsTyping(true);

    // Bot's response based on the option
    let botResponse = {
      type: "bot",
      content: "",
      options: [],
    };
    switch (option) {
      case "‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•à‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?":
        botResponse.content =
          '‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è "‡§Ö‡§≠‡•Ä ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç" ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§Ü‡§™‡§ï‡•ã ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡•á‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§ üöÄ';
        botResponse.options = [
          "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§®-‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?",
          "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç",
        ];
        break;
      case "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§®-‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?":
        botResponse.content =
          "‡§ï‡•á‡§µ‡§≤ ‡§¨‡•à‡§Ç‡§ï ‡§∏‡•ç‡§ü‡•á‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§î‡§∞ ‡§â‡§¶‡•ç‡§Ø‡§Æ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§ üìÑ";
        botResponse.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç"];
        break;

      case "‡§∞‡•á‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§ö‡§æ‡§∞‡•ç‡§ú‡•á‡§∏":
        botResponse.content =
          "‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§¶‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∂‡•Å‡§≤‡•ç‡§ï ‡§á‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§π‡•à‡§Ç:\n\n" +
          "üí∞ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø: ‚Çπ5,000 ‡§∏‡•á ‚Çπ10,00,000 ‡§§‡§ï\n\n" +
          "üìÖ ‡§Ö‡§µ‡§ß‡§ø: 7 ‡§∏‡•á 100 ‡§¶‡§ø‡§®\n\n" +
          "‚úÖ ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡•Ä-‡§ï‡•ç‡§≤‡•ã‡§ú‡§º‡§∞ ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§®‡§π‡•Ä‡§Ç\n\n" +
          "‚úÖ ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡•Ä‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§®‡§π‡•Ä‡§Ç\n\n" +
          "üìä ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞: ‡§™‡•ç‡§∞‡§§‡§ø ‡§¶‡§ø‡§® 0.2%";
        botResponse.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç"];
        break;

      case "EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞":
        setShowEmiCalculator(true);
        botResponse.content =
          "‡§ö‡§≤‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä EMI ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡•Ä‡§ö‡•á ‡§¶‡•Ä ‡§ó‡§à ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: üìä";
        botResponse.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç"];
        break;

      case "Yes":
      case "No":
        if (showEligibilityQuiz) {
          const answer = option === "Yes";
          setQuizAnswers((prev) => ({ ...prev, [quizStep]: answer }));

          if (quizStep < 3) {
            // Move to next question
            const nextStep = quizStep + 1;
            setQuizStep(nextStep);
            botResponse.content = getQuizQuestion(nextStep);
            botResponse.options = ["Yes", "No"];
          } else {
            // Quiz completed, show results
            const isEligible = calculateEligibility();
            setShowEligibilityQuiz(false);

            if (isEligible) {
              botResponse.content =
                "üéâ Congratulations! You are eligible for a loan with us!\n\n" +
                "Based on your answers, you meet our basic eligibility criteria. Would you like to proceed with your application?";
              botResponse.options = ["Apply Now", "Back to main menu"];
            } else {
              botResponse.content =
                "üòî Based on your answers, you may not be eligible for a loan at this time.\n\n" +
                "Don't worry! You can try again in a few months or contact our support team for more information.";
              botResponse.options = ["Back to main menu"];
            }
          }
        } else {
          // Handle regular Yes/No responses
          botResponse.content =
            "‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§î‡§∞ ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?";
          botResponse.options = [
            "‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•à‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?",
            "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§®-‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?",
            "‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∂‡•Å‡§≤‡•ç‡§ï",
            "EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞",
            // '‡§Æ‡•á‡§∞‡•Ä ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç',
            "‡§Ö‡§ï‡•ç‡§∏‡§∞ ‡§™‡•Ç‡§õ‡•á ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∏‡§µ‡§æ‡§≤ ‡§¶‡•á‡§ñ‡•á‡§Ç",
          ];
        }
        break;

      case "Apply Now":
        // Show bot's response only (user message is already added by the main handler)
        setTimeout(() => {
          setIsTyping(false);
          setMessages((prev) => [
            ...prev,
            {
              type: "bot",
              content:
                "‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ ‡§ö‡•Å‡§®‡§æ‡§µ! üöÄ ‡§ö‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•á‡§ú ‡§™‡§∞ ‡§≤‡•á ‡§ö‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•à‡§® ‡§ï‡§æ‡§∞‡•ç‡§° ‡§î‡§∞ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§∞‡§ñ‡•á‡§Ç‡•§",
              options: ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å"],
            },
          ]);
          setTimeout(() => {
            navigate("/apply/pan-mobile");
          }, 1500);
        }, 1000);
        break;

      case "EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç":
        if (emiInputs.loanAmount && emiInputs.tenure) {
          const principal = parseFloat(emiInputs.loanAmount);
          const days = parseInt(emiInputs.tenure);
          if (days < minDays || days > maxDays) {
            botResponse.content = `‡§ï‡•É‡§™‡§Ø‡§æ ${minDays} ‡§∏‡•á ${maxDays} ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§ï‡•Ä ‡§Ö‡§µ‡§ß‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§`;
            botResponse.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å"];
          } else {
            // Simple interest calculation for daily interest
            const totalInterest = (principal * fixedInterestRate * days) / 100;
            const totalAmount = principal + totalInterest;
            const emi = totalAmount / days;
            botResponse.content =
              `‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•á EMI ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§π‡•à:\n\n` +
              `üí∞ ‡§¶‡•à‡§®‡§ø‡§ï EMI: ‚Çπ${Math.round(emi).toLocaleString("en-IN")}\n` +
              `üíµ ‡§ï‡•Å‡§≤ ‡§¨‡•ç‡§Ø‡§æ‡§ú: ‚Çπ${Math.round(totalInterest).toLocaleString(
                "en-IN"
              )}\n` +
              `üìä ‡§ï‡•Å‡§≤ ‡§∞‡§æ‡§∂‡§ø: ‚Çπ${Math.round(totalAmount).toLocaleString(
                "en-IN"
              )}\n\n` +
              `‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§è‡§ï ‡§î‡§∞ EMI ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?`;

            botResponse.options = [
              "‡§è‡§ï ‡§î‡§∞ EMI ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç",
              "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å",
            ];
            setShowEmiCalculator(false);
          }
        } else {
          botResponse.content = "EMI ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≠‡§∞‡•á‡§Ç‡•§";
          botResponse.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å"];
        }
        break;

      case "Calculate Another EMI":
        setShowEmiCalculator(true);
        setEmiInputs({ loanAmount: "", interestRate: "", tenure: "" });
        botResponse.content = "‡§®‡§à EMI ‡§ó‡§£‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§ø‡§Æ‡•ç‡§® ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:";
        botResponse.options = ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å"];
        break;

      case "View FAQs":
        botResponse.content =
          "‡§Ø‡§π‡§æ‡§Å ‡§ï‡•Å‡§õ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•Ç‡§õ‡•á ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?";
        botResponse.options = [
          "‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§≤‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§µ‡§ß‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å",
        ];
        break;

      case "What is the minimum loan amount?":
        botResponse.content =
          "‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‚Çπ5,000 ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§≤‡•ã‡§® ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?";
        botResponse.options = [
          "‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§≤‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§µ‡§ß‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å",
        ];
        break;

      case "What is the maximum loan amount?":
        botResponse.content =
          "‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‚Çπ10,00,000 ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§≤‡•ã‡§® ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?";
        botResponse.options = [
          "‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§≤‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§µ‡§ß‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å",
        ];
        break;
      case "What is the interest rate?":
        botResponse.content =
          "‡§π‡§Æ‡§æ‡§∞‡§æ ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞ 0.2% ‡§™‡•ç‡§∞‡§§‡§ø ‡§¶‡§ø‡§® ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§î‡§∞ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?";
        botResponse.options = [
          "‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§≤‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§µ‡§ß‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å",
        ];
        break;

      case "What is the loan tenure?":
        botResponse.content =
          "‡§≤‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§µ‡§ß‡§ø 7 ‡§¶‡§ø‡§® ‡§∏‡•á ‡§≤‡•á‡§ï‡§∞ 100 ‡§¶‡§ø‡§® ‡§§‡§ï ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§≤‡•ã‡§® ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?";
        botResponse.options = [
          "‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§≤‡•ã‡§® ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
          "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å",
        ];
        break;

      case "Go to Dashboard":
        navigate("/dashboard");
        break;
      case "Back to main menu":
        botResponse.content = "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§î‡§∞ ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?";
        botResponse.options = [
          "‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•à‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?",
          "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?",
          "‡§¶‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∂‡•Å‡§≤‡•ç‡§ï",
          "EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞",
          // '‡§Æ‡•á‡§∞‡•Ä ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç',
          "FAQ ‡§¶‡•á‡§ñ‡•á‡§Ç",
        ];
        break;
      default:
        botResponse.content =
          "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?";
        botResponse.options = [
          "‡§≤‡•ã‡§® ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•à‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?",
          "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§® ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ö‡§æ‡§π‡§ø‡§è?",
          "‡§¶‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∂‡•Å‡§≤‡•ç‡§ï",
          "EMI ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞",
          // '‡§Æ‡•á‡§∞‡•Ä ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç',
          "FAQ ‡§¶‡•á‡§ñ‡•á‡§Ç",
        ];
    }

    // Add bot response with a slight delay for typing effect
    setTimeout(() => {
      setIsTyping(false);
      setMessages((prev) => [...prev, botResponse]);
    }, 1000);
  };

  // Function to get quiz questions
  const getQuizQuestion = (step) => {
    const questions = [
      "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§∞ 18-58 ‡§µ‡§∞‡•ç‡§∑ ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§π‡•à?",
      "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§®‡•á‡§ü ‡§∏‡•à‡§≤‡§∞‡•Ä ‚Çπ40,000 ‡§Ø‡§æ ‡§â‡§∏‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•à?",
      "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 3 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡§æ ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§ú‡•à‡§ï‡•ç‡§∂‡§® ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§µ‡§æ‡§≤‡§æ ‡§¨‡•à‡§Ç‡§ï ‡§ñ‡§æ‡§§‡§æ ‡§π‡•à?",
      "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§è‡§ï ‡§µ‡•à‡§ß PAN ‡§ï‡§æ‡§∞‡•ç‡§° ‡§π‡•à?",
    ];

    return questions[step];
  };

  // Function to calculate eligibility based on quiz answers
  const calculateEligibility = () => {
    // Simple eligibility check - all answers should be Yes
    return Object.values(quizAnswers).every((answer) => answer === true);
  };

  return (
    <div className="fixed bottom-2  right-1 z-9999">
      {/* Chat Toggle Button */}
      <motion.button
        onClick={() => setIsOpen(!isOpen)}
        className={`w-10 h-10  rounded-full flex items-center justify-center shadow-lg transition-all duration-300 ${
          isOpen
            ? "bg-gradient-to-r from-blue-600 to-indigo-600 text-white"
            : "bg-gradient-to-r from-blue-600 to-indigo-600 text-white hover:scale-110"
        }`}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.95 }}
      >
        <AnimatePresence mode="wait">
          {isOpen ? (
            <motion.div
              key="close"
              initial={{ rotate: -180, opacity: 0 }}
              animate={{ rotate: 0, opacity: 1 }}
              exit={{ rotate: 180, opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              <X className="w-6 h-6" />
            </motion.div>
          ) : (
            <motion.div
              key="open"
              initial={{ rotate: 180, opacity: 0 }}
              animate={{ rotate: 0, opacity: 1 }}
              exit={{ rotate: -180, opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              <MessageCircle className="w-6 h-6" />
            </motion.div>
          )}
        </AnimatePresence>
      </motion.button>

      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            className={`${
              isFullscreen
                ? "fixed inset-0 w-full h-full rounded-none "
                : 
                  // udpated
                  "absolute bottom-12 right-0 w-80 h-[440px]"
                } bg-white/20 shadow-1xl overflow-hidden rounded-2xl border border-blue-200`}

            // } bg-white shadow-2xl overflow-hidden border border-gray-100`}
          >
            {/* Chat Header */}
            <div className=" bg-blue-800 p-4 relative overflow-hidden">
              <div className="absolute inset-0 bg-white/10 bg-[radial-gradient(circle_at_center,_rgba(255,255,255,0.1)_1px,_transparent_1px)] "></div>
              <div className="absolute top-0 right-0 w-24 h-24 bg-blue-400 rounded-full mix-blend-multiply filter blur-xl opacity-30 translate-x-1/2 -translate-y-1/2"></div>
              <div className="absolute top-0 left-0 w-24 h-24 bg-indigo-400 rounded-full mix-blend-multiply filter blur-xl opacity-30 -translate-x-1/2 -translate-y-1/2"></div>
              <div className="relative flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div>
                    <h3 className="text-white font-semibold">
                      "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§π‡•Ç‡§Å ‡§Ü‡§™‡§ï‡§æ ‡§≤‡•ã‡§®‡§∏‡§π‡§æ‡§Ø‡§ï!"
                      <p className="text-white/80 text-sm">
                        "‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞‡•§"
                      </p>
                    </h3>{" "}
                  </div>
                </div>
                <button
                  onClick={() => setIsFullscreen(!isFullscreen)}
                  className="p-2 rounded-full hover:bg-white/60 transition-colors duration-200"
                >
                  {isFullscreen ? (
                    <X className="w-2 h-2 text-white" />
                  ) : (
                    <MessageCircle className="w-1 h-1 text-white" />
                  )}
                </button>
              </div>
            </div>

            {/* Chat Messages */}
            <div
              className={
                isFullscreen ? "h-[calc(100%-8rem)]" : "h-[calc(100%-8rem)]"
              }
              style={{ overflowY: "auto" }}
            >
              {messages
                .filter((m) => m.content)
                .map((message, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className={`flex ${
                      message.type === "user" ? "justify-end" : "justify-start"
                    }`}
                  >
                    <div
                      className={`flex items-start gap-2 max-w-[80%] ${
                        message.type === "user"
                          ? "flex-row-reverse"
                          : "flex-row"
                      }`}
                    >
                      <div
                        className={`rounded-full flex items-center justify-center ${
                          message.type === "user"
                            ? "w-8 h-8 bg-gradient-to-r from-blue-600 to-indigo-600 text-white"
                            : ""
                        }`}
                      >
                        {message.type === "user" ? (
                          <User className="w-4 h-4" />
                        ) : (
                          <></>
                        )}
                      </div>
                      <div
                        className={`rounded-2xl p-3 ${
                          message.type === "user"
                            ? "bg-gradient-to-r from-blue-600 to-indigo-600 text-white"
                            : "bg-gray-100 text-gray-800"
                        }`}
                      >
                        <p className="whitespace-pre-line text-sm">
                          {message.content}
                        </p>
                        {showEmiCalculator &&
                          message.type === "bot" &&
                          message.content.includes("EMI") && (
                            <div className="mt-4 space-y-3">
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Loan Amount (‚Çπ5k to ‚Çπ10L)
                                </label>
                                <input
                                  type="number"
                                  value={emiInputs.loanAmount}
                                  onChange={(e) =>
                                    setEmiInputs((prev) => ({
                                      ...prev,
                                      loanAmount: e.target.value,
                                    }))
                                  }
                                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                  placeholder="Enter loan amount"
                                />
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Interest Rate (per day)
                                </label>
                                <input
                                  type="number"
                                  value={0.2}
                                  readOnly
                                  className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100 text-gray-500 cursor-not-allowed"
                                />
                              </div>
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Loan Tenure (7-100 Days)
                                </label>
                                <input
                                  type="number"
                                  min={7}
                                  max={100}
                                  value={emiInputs.tenure}
                                  onChange={(e) =>
                                    setEmiInputs((prev) => ({
                                      ...prev,
                                      tenure: e.target.value,
                                    }))
                                  }
                                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                  placeholder="Enter loan tenure (7-100 days)"
                                />
                              </div>
                              <motion.button
                                onClick={() =>
                                  handleOptionClick("‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç")
                                }
                                className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-2 rounded-lg hover:opacity-90 transition-opacity"
                                whileHover={{ scale: 1.02 }}
                                whileTap={{ scale: 0.98 }}
                              >
                                ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç{" "}
                              </motion.button>
                            </div>
                          )}
                        {message.options && (
                          <div className="mt-3 space-y-2">
                            {message.options.map((option, optIndex) => (
                              <motion.button
                                key={optIndex}
                                onClick={() => handleOptionClick(option)}
                                className={`w-full text-left px-4 py-2 rounded-lg text-sm transition-all duration-200 ${
                                  message.type === "user"
                                    ? "bg-white/20 hover:bg-white/30 text-white"
                                    : "bg-white/60 hover:bg-gray-50 text-gray-800"
                                   
                                }`}
                                whileHover={{ scale: 1.02 }}
                                whileTap={{ scale: 0.98 }}
                              >
                                {option}
                              </motion.button>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}

              {/* Typing Indicator */}
              {isTyping && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="flex justify-start"
                >
                  <div className="flex items-start gap-2 max-w-[80%]">
                    <div className="flex-shrink-0">
                      {/* Removed white circle here */}
                    </div>
                    <div className="rounded-2xl p-3 bg-gray-100 text-gray-800">
                      <div className="flex space-x-1">
                        <motion.div
                          className="w-2 h-2 bg-gray-400 rounded-full"
                          animate={{ y: [0, -5, 0] }}
                          transition={{
                            duration: 0.6,
                            repeat: Infinity,
                            delay: 0,
                          }}
                        />
                        <motion.div
                          className="w-2 h-2 bg-gray-400 rounded-full"
                          animate={{ y: [0, -5, 0] }}
                          transition={{
                            duration: 0.6,
                            repeat: Infinity,
                            delay: 0.2,
                          }}
                        />
                        <motion.div
                          className="w-2 h-2 bg-gray-400 rounded-full"
                          animate={{ y: [0, -5, 0] }}
                          transition={{
                            duration: 0.6,
                            repeat: Infinity,
                            delay: 0.4,
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}

              <div ref={messagesEndRef} />
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ChatBot;